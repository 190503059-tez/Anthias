- name: Ensure folders exist
  file:
    path: "/home/pi/{{ item }}"
    state: directory
    owner: pi
    group: pi
  with_items:
    - .screenly
    - .config
    - screenly_assets

- name: Copy Screenly default config
  copy:
    owner: pi
    group: pi
    src: screenly.conf
    dest: /home/pi/.screenly/screenly.conf
    force: no

- name: Copy Screenly default assets file
  copy:
    owner: pi
    group: pi
    src: default_assets.yml
    dest: /home/pi/.screenly/default_assets.yml
    force: yes

- name: Remove deprecated parameter "listen"
  lineinfile:
    regexp: '^.*listen.*'
    state: absent
    dest: /home/pi/.screenly/screenly.conf

- name: Install pip dependencies
  pip:
    requirements: /home/pi/screenly/requirements/requirements.host.txt
    extra_args: "--no-cache-dir --upgrade"

- name: Create default assets database if does not exists
  copy:
    owner: pi
    group: pi
    src: screenly.db
    dest: /home/pi/.screenly/screenly.db
    force: no

# This needs to be moved into Docker
- name: Run database migration
  become_user: pi
  command: python /home/pi/screenly/bin/migrate.py
  register: migrate

- debug: msg="{{ migrate.stdout }}"

- name: Remove screenly_utils.sh
  file:
    state: absent
    path: /usr/local/bin/screenly_utils.sh

- cron:
    name: Cleanup screenly_assets
    state : absent
    user: pi

- name: Download upgrade_screenly.sh from github repository
  get_url:
    url: https://raw.githubusercontent.com/Screenly/screenly-ose/master/bin/install.sh
    dest: /usr/local/sbin/upgrade_screenly.sh
    mode: 0700
    owner: root
    group: root
    force: yes

- name: Copy screenly_overrides
  copy:
    src: screenly_overrides
    dest: /etc/sudoers.d/screenly_overrides
    mode: 0440
    owner: root
    group: root

- name: Copy screenly_usb_assets.sh
  copy:
    src: screenly_usb_assets.sh
    dest: /usr/local/bin/screenly_usb_assets.sh
    mode: 0755
    owner: root
    group: root

- name: Installs autoplay udev rule
  copy:
    src: 50-autoplay.rules
    dest: /etc/udev/rules.d/50-autoplay.rules
    mode: 644
    owner: root
    group: root

- name: Copy systemd-udevd service
  copy:
    src: /lib/systemd/system/systemd-udevd.service
    dest: /etc/systemd/system/systemd-udevd.service

- name: Configure systemd-udevd service
  lineinfile:
    dest: /etc/systemd/system/systemd-udevd.service
    regexp: '^MountFlags='
    line: 'MountFlags=shared'

- name: Copy screenly systemd units
  copy:
    src: "{{ item }}"
    dest: "/etc/systemd/system/{{ item }}"
  with_items: "{{ screenly_systemd_units }}"

- name: Remove plymouth-quit-wait.service
  file:
    state: absent
    dest: /lib/systemd/system/plymouth-quit-wait.service

- name: Remove plymouth-quit.service
  file:
    state: absent
    dest: /lib/systemd/system/plymouth-quit.service

- name: Enable screenly systemd services
  command: systemctl enable {{ item }} chdir=/etc/systemd/system
  with_items: "{{ screenly_systemd_units }}"

- name: Check if deprecated systemd services exists
  stat:
    path: /etc/systemd/system/X.service
  register: x_service

- set_fact: x_service_exist="{{x_service.stat.exists}}"

- name: Disable deprecated systemd services
  systemd:
    name: "{{ item }}"
    state: stopped
    enabled: no
  with_items: "{{ deprecated_screenly_systemd_units }}"
  when: x_service_exist

- name: Remove deprecated systemd units
  file:
    path: "/etc/systemd/system/{{ item }}"
    state: absent
  with_items: "{{ deprecated_screenly_systemd_units }}"

- name: Check /proc/device-tree/model file
  command: cat /proc/device-tree/model
  register: model_file

- debug:
    msg: "Device type: {{ device_type }}"

- debug:
    msg: "Use {{ docker_tag }} version of images."

- name: Build screenly-ose-server
  docker_image:
    name: "screenly/screenly-ose-server:{{ docker_tag }}"
    build:
      pull: no
      path: /home/pi/screenly
      dockerfile: /home/pi/screenly/docker/Dockerfile.server
    source: build

- name: Build screenly-ose-viewer
  docker_image:
    name: "screenly/screenly-ose-viewer:{{ docker_tag }}-{{ device_type }}"
    build:
      pull: no
      path: /home/pi/screenly
      dockerfile: /home/pi/screenly/docker/Dockerfile.viewer
      args:
        - PI_VERSION={{ device_type }}

- name: Build screenly-ose-websocket
  docker_image:
    name: "screenly/screenly-ose-websocket:{{ docker_tag }}"
    build:
      pull: no
      path: /home/pi/screenly
      dockerfile: /home/pi/screenly/docker/Dockerfile.websocket

- name: Build screenly-ose-celery
  docker_image:
    name: "screenly/screenly-ose-celery:{{ docker_tag }}"
    build:
      pull: no
      path: /home/pi/screenly
      dockerfile: /home/pi/screenly/docker/Dockerfile.server

- name: Run docker-compose
  docker_compose:
    project_name: screenly
    definition:
      version: "2"
      services:
        screenly-ose-server:
          image: "screenly/screenly-ose-server:{{ docker_tag }}"
          build:
            context: /home/pi/screenly
            dockerfile: /home/pi/screenly/docker/Dockerfile.server
          container_name: screenly-server
          entrypoint: python server.py
          restart: unless-stopped
          network_mode: "host"
          volumes:
            - /home/pi/screenly_assets:/home/pi/screenly_assets
            - /home/pi/screenly:/home/pi/screenly
            - /home/pi/.screenly:/home/pi/.screenly
            - /etc/timezone:/etc/timezone:ro
            - /etc/localtime:/etc/localtime:ro

        screenly-ose-viewer:
          image: "screenly/screenly-ose-viewer:{{ docker_tag }}-{{ device_type }}"
          build:
            context: /home/pi/screenly
            dockerfile: /home/pi/screenly/docker/Dockerfile.viewer
            args:
              - PI_VERSION={{ device_type }}
          container_name: screenly-viewer
          privileged: true
          restart: unless-stopped
          network_mode: "host"
          volumes:
            - /home/pi/screenly_assets:/home/pi/screenly_assets
            - /home/pi/screenly:/home/pi/screenly
            - /home/pi/.screenly:/home/pi/.screenly
            - /etc/timezone:/etc/timezone:ro
            - /etc/localtime:/etc/localtime:ro
          depends_on:
            - screenly-ose-server

        screenly-ose-websocket:
          image: "screenly/screenly-ose-websocket:{{ docker_tag }}"
          build:
            context: /home/pi/screenly
            dockerfile: /home/pi/screenly/docker/Dockerfile.websocket
          container_name: screenly-ose-websocket
          restart: unless-stopped
          network_mode: "host"
          volumes:
            - /home/pi/screenly_assets:/home/pi/screenly_assets
            - /home/pi/screenly:/home/pi/screenly
            - /home/pi/.screenly:/home/pi/.screenly
            - /etc/timezone:/etc/timezone:ro
            - /etc/localtime:/etc/localtime:ro
          depends_on:
            - screenly-ose-server

        screenly-ose-celery:
          image: "screenly/screenly-ose-celery:{{ docker_tag }}"
          build:
            context: /home/pi/screenly
            dockerfile: /home/pi/screenly/docker/Dockerfile.server
          container_name: screenly-celery
          entrypoint: celery worker -A server.celery -B -n worker@screenly --loglevel=info --schedule /tmp/celerybeat-schedule
          network_mode: "host"
          restart: unless-stopped
          volumes:
            - /home/pi/screenly_assets:/home/pi/screenly_assets
            - /home/pi/screenly:/home/pi/screenly
            - /home/pi/.screenly:/home/pi/.screenly
            - /etc/timezone:/etc/timezone:ro
            - /etc/localtime:/etc/localtime:ro
          depends_on:
            - screenly-ose-server
            - redis

        redis:
          image: redis:alpine
          restart: unless-stopped
          ports:
            - "6379:6379"

    recreate: smart

- name: Pause screenly-viewer container
  command: docker pause screenly-viewer
